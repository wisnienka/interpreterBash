
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARG DOLLAR ELSE END EQ EQUALS FI GT IF LT L_RECT NE PIPE RIGHT R_RECT SEMICOLON THENprogram : statementsargument : ARGargument : DOLLAR ARGassign : command EQUALS commandcommand : argumentcommand : command argumentcommand : command PIPE commandif_condition : IF L_RECT argument cond_op argument R_RECTcond_op : EQ\n               | NE\n               | LT\n               | GTif_statement : if_condition END THEN END statements END FIif_else : if_condition END THEN END statements END ELSE END statements END FIcommand : command RIGHT argumentstatement : command\n                 | assign\n                 | if_statement\n                 | if_else\n    separator : SEMICOLON\n              | END\n              | separator END\n              | separator SEMICOLON\n    \n    statements : statement\n    \n    statements : statements separator statement\n    '
    
_lr_action_items = {'ARG':([0,4,8,10,11,13,14,15,16,17,18,19,21,22,24,25,26,27,28,31,32,33,34,35,36,39,43,45,],[10,10,-5,-2,21,10,-20,-21,-6,10,10,10,-3,10,-22,-23,10,-15,10,10,10,-9,-10,-11,-12,-21,10,-21,]),'DOLLAR':([0,4,8,10,13,14,15,16,17,18,19,21,22,24,25,26,27,28,31,32,33,34,35,36,39,43,45,],[11,11,-5,-2,11,-20,-21,-6,11,11,11,-3,11,-22,-23,11,-15,11,11,11,-9,-10,-11,-12,-21,11,-21,]),'IF':([0,13,14,15,24,25,31,39,43,45,],[12,12,-20,-21,-22,-23,12,-21,12,-21,]),'$end':([1,2,3,4,5,6,7,8,10,16,21,23,26,27,28,41,46,],[0,-1,-24,-16,-17,-18,-19,-5,-2,-6,-3,-25,-7,-15,-4,-13,-14,]),'SEMICOLON':([2,3,4,5,6,7,8,10,13,14,15,16,21,23,24,25,26,27,28,37,39,41,44,45,46,],[14,-24,-16,-17,-18,-19,-5,-2,25,-20,-21,-6,-3,-25,-22,-23,-7,-15,-4,14,-21,-13,14,-21,-14,]),'END':([2,3,4,5,6,7,8,9,10,13,14,15,16,21,23,24,25,26,27,28,29,37,39,40,41,42,44,45,46,],[15,-24,-16,-17,-18,-19,-5,20,-2,24,-20,-21,-6,-3,-25,-22,-23,-7,-15,-4,31,39,-21,-8,-13,43,45,-21,-14,]),'PIPE':([4,8,10,16,21,26,27,28,],[17,-5,-2,-6,-3,17,-15,17,]),'RIGHT':([4,8,10,16,21,26,27,28,],[18,-5,-2,-6,-3,18,-15,18,]),'EQUALS':([4,8,10,16,21,26,27,],[19,-5,-2,-6,-3,-7,-15,]),'EQ':([10,21,30,],[-2,-3,33,]),'NE':([10,21,30,],[-2,-3,34,]),'LT':([10,21,30,],[-2,-3,35,]),'GT':([10,21,30,],[-2,-3,36,]),'R_RECT':([10,21,38,],[-2,-3,40,]),'L_RECT':([12,],[22,]),'THEN':([20,],[29,]),'FI':([39,45,],[41,46,]),'ELSE':([39,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,31,43,],[2,37,44,]),'statement':([0,13,31,43,],[3,23,3,3,]),'command':([0,13,17,19,31,43,],[4,4,26,28,4,4,]),'assign':([0,13,31,43,],[5,5,5,5,]),'if_statement':([0,13,31,43,],[6,6,6,6,]),'if_else':([0,13,31,43,],[7,7,7,7,]),'argument':([0,4,13,17,18,19,22,26,28,31,32,43,],[8,16,8,8,27,8,30,16,16,8,38,8,]),'if_condition':([0,13,31,43,],[9,9,9,9,]),'separator':([2,37,44,],[13,13,13,]),'cond_op':([30,],[32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','bash.py',43),
  ('argument -> ARG','argument',1,'p_argument','bash.py',79),
  ('argument -> DOLLAR ARG','argument',2,'p_dollar','bash.py',84),
  ('assign -> command EQUALS command','assign',3,'p_assign','bash.py',89),
  ('command -> argument','command',1,'p_command','bash.py',94),
  ('command -> command argument','command',2,'p_command_with_arg','bash.py',99),
  ('command -> command PIPE command','command',3,'p_statement_pipe','bash.py',104),
  ('if_condition -> IF L_RECT argument cond_op argument R_RECT','if_condition',6,'p_if_condition','bash.py',109),
  ('cond_op -> EQ','cond_op',1,'p_conditional_operator','bash.py',114),
  ('cond_op -> NE','cond_op',1,'p_conditional_operator','bash.py',115),
  ('cond_op -> LT','cond_op',1,'p_conditional_operator','bash.py',116),
  ('cond_op -> GT','cond_op',1,'p_conditional_operator','bash.py',117),
  ('if_statement -> if_condition END THEN END statements END FI','if_statement',7,'p_if_statement','bash.py',122),
  ('if_else -> if_condition END THEN END statements END ELSE END statements END FI','if_else',11,'p_if_else_statement','bash.py',127),
  ('command -> command RIGHT argument','command',3,'p_statement_redirect_truncate','bash.py',132),
  ('statement -> command','statement',1,'p_statement','bash.py',137),
  ('statement -> assign','statement',1,'p_statement','bash.py',138),
  ('statement -> if_statement','statement',1,'p_statement','bash.py',139),
  ('statement -> if_else','statement',1,'p_statement','bash.py',140),
  ('separator -> SEMICOLON','separator',1,'p_separator','bash.py',146),
  ('separator -> END','separator',1,'p_separator','bash.py',147),
  ('separator -> separator END','separator',2,'p_separator','bash.py',148),
  ('separator -> separator SEMICOLON','separator',2,'p_separator','bash.py',149),
  ('statements -> statement','statements',1,'p_statements','bash.py',155),
  ('statements -> statements separator statement','statements',3,'p_statements_multiple','bash.py',161),
]
